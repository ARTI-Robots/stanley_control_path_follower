#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
from os.path import abspath, basename, dirname, splitext

PACKAGE = basename(dirname(dirname(abspath(__file__))))

gen = ParameterGenerator()

gen.add("input_pose_topic", str_t, 0, "Input pose topic to process control", "/ukf_pose")
gen.add("target_frame", str_t, 0, "Id of coordinate frame used to follow path", "map")
gen.add("control_gain", double_t, 0, "Control gain to correct cross track error", 0.1, 0.0, 5.0)
gen.add("lookahead", double_t, 0, "[m] Lookahead distance used to find the next point to reach (normally be same as wheelbase)", 1.0, 0.0, 10.0)
gen.add("heading_error_gain", double_t, 0, "Control gain to correct heading error; should be 1", 1.0, 0.0, 1.0)
gen.add("speed_proportional_gain_kp", double_t, 0, "Proportional gain for reaching target speed", 1.0, 0.0, 5.0)
gen.add("speed_proportional_gain_kp_negative", double_t, 0, "Proportional gain for reaching target speed for reverse drive", 1.0, 0.0, 5.0)
gen.add("max_steering_angle", double_t, 0, "[degree] Max steering angle", 10.0, 0.0, 90.0)
gen.add("max_velocity", double_t, 0, "[m/s] Max velocity", 1.0, 0.0, 10.0)
gen.add("min_linear_x", double_t, 0, "[m/s] Minimal linear vel if target not reached", 0.0, 0.0, 10.0)
gen.add("cross_track_min_linear_x", double_t, 0, "[m/s] Lower limit for cross track error computation", 0.2, 0.0, 10.0)
gen.add("wheel_base", double_t, 0, "[m] Vehicle wheel base", 1.0, -10.0, 10.0)
gen.add("rotate_on_place", bool_t, 0, "Allow rotate on place movement", True)
gen.add("default_trans_limit", double_t, 0, "[m] Default x and y limit", 0.5, 0.0, 10.0)
gen.add("default_theta_limit", double_t, 0, "[rad] Default theta (yaw) limit", 0.2618, 0.0, 3.14159)
gen.add("transformation_timeout", double_t, 0, "[s] Timeout when waiting for transformations", 1.0, 0.0, 10.0)
gen.add("enable_reverse_driving", bool_t, 0, "Enable reverse driving if angle to goal is larger than pi", False)
gen.add("loosing_goal_distance", double_t, 0, "[m] If driving past the goal we stop after this distance", 0.1, 0.0, 10.0)
gen.add("target_speed_from_nearest_point", bool_t, 0, "Use the speed on the nearest point on the trajectory to the base", True)

gen.add("enable_check_blocked_duration", bool_t, 0, "Enable check for blocked robot (no movement)", False)
gen.add("max_blocked_duration", double_t, 0, "[s] Maximum robot blocking duration until upper pipeline stages are notified", 10.0, 0.0, 60.0)

gen.add("yaw_maximum_change", double_t, 0, default=30.0, min=0.0, max=180.0,
        description="[deg] Maximum change in yaw between movements to split trajectory")

exit(gen.generate(PACKAGE, PACKAGE + "_node", splitext(basename(__file__))[0]))
